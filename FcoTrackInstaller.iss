; Script generated by the Inno Script Studio Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define MyAppName "FCOTrack"
#define MyAppVersion "2.2"
#define MyAppPublisher "Philips"
#define MyAppExeName "FcoTrack.exe"

[Setup]
; NOTE: The value of AppId uniquely identifies this application.
; Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{7909B299-21F3-4E63-B2B9-49E6C9555E9D}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
;AppVerName={#MyAppName} {#MyAppVersion}
AppPublisher={#MyAppPublisher}
DefaultDirName={sd}\{#MyAppName}
DefaultGroupName={#MyAppName}
DisableProgramGroupPage=yes
OutputBaseFilename=FCOTrackSetup
Compression=lzma
SolidCompression=yes
VersionInfoCompany=Philips

[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"

[Tasks]
Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: unchecked

[Files]
Source: "bin\Release\FcoTrack.exe"; DestDir: "{app}"; Flags: ignoreversion
Source: "bin\Release\*.dll"; DestDir: "{app}"; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "bin\Release\*.xml"; DestDir: "{app}"; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "bin\Release\*.exe"; DestDir: "{app}"; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "bin\Release\*.config"; DestDir: "{app}"; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "bin\Release\*.db"; DestDir: "{app}"; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "bin\Release\x64\*"; DestDir: "{app}"; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "bin\Release\x86\*"; DestDir: "{app}"; Flags: ignoreversion recursesubdirs createallsubdirs
; NOTE: Don't use "Flags: ignoreversion" on any shared system files
Source: "bin\Release\*.sql"; DestDir: "{app}"

[Icons]
Name: "{group}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"
Name: "{commondesktop}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"; Tasks: desktopicon

[INI]
Filename: "{app}\config.ini"; Section: "common"; Key: "ArchivePath"; String: {code:GetArchiveDir}
Filename: "{app}\config.ini"; Section: "common"; Key: "ReportPath"; String: {code:GetReportDir}
Filename: "{app}\config.ini"; Section: "common"; Key: "UpgradeCodePath"; String: {code:GetInputDataDir}

[Run]
Filename: "{app}\dbupgrade.exe"; 

[Code]
var
  InputDataDirPage: TInputDirWizardPage;
  OutputDataDirPage: TInputDirWizardPage;

procedure InitializeWizard;
begin
  InputDataDirPage := CreateInputDirPage(wpSelectDir,
    'Select Input Data Directory', 'Set up the directory to get Upgrade Code table',
    'Select the folder from which upgrade code table will be imported, then click Next.',
    False, '');
  InputDataDirPage.Add('');

  OutputDataDirPage := CreateInputDirPage(wpSelectDir,
  'Select Output Report Directory', 'Select the directory to export reports and archive Upgrade Code table',
  '',
  False,'');
  OutputDataDirPage.Add('Select the directory to which the Daily/Weekly Reports will be exported');
  outputDataDirPage.Add('Select the directory as Archive folder');

end;

function UpdateReadyMemo(Space, NewLine, MemoUserInfoInfo, MemoDirInfo, MemoTypeInfo,
  MemoComponentsInfo, MemoGroupInfo, MemoTasksInfo: String): String;
var
  S: String;
begin
  { Fill the 'Ready Memo' with the normal settings and the custom settings }
  S := S + MemoDirInfo + NewLine;
  S := S + Space + InputDataDirPage.Values[0] + ' (Input data direcotry)' + NewLine;
  S := S + Space + OutputDataDirPage.Values[0] + ' (Daily/Weekly Reports directory)' + NewLine;
  S := S + Space + OutputDataDirPage.Values[1] + ' (Archive directory)' + NewLine;

  Result := S;
end;

function GetInputDataDir(Param: String): String;
begin
  { Return the upgrade code Dir }
  Result := InputDataDirPage.Values[0];
end;

function GetReportDir(Param: String): String;
begin
  { Return the report Dir }
  Result := OutputDataDirPage.Values[0];
end;

function GetArchiveDir(Param: String): String;
begin
  { Return the archive Dir}
  Result := OutputDataDirPage.Values[1];
end;
